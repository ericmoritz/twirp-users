syntax = "proto3";
package ericmoritz.users.users;
option go_package = "users";

// Users is a simple service for handling user registration, authentication, and authorization

service Users {
    // Register a username
    // Errors: AlreadyExists, InvalidArgument
    rpc Register(RegisterReq) returns (RegisterResp);

    // Login a user. Use this request to acquire a Session message. 
    //  The Session message is used to make authenticated requests. You can store it and use it with multiple 
    //  requests as long as the session is valid.
    //
    // Errors: PermissionDenied
    rpc Login(LoginReq) returns (LoginResp);

    // User get the details about a user.
    // Errors: PermissionDenied
    rpc User(UserReq) returns (UserResp);

    // CurrentUser gets the user for a session
    // Errors: PermissionDenied
    rpc CurrentUser(CurrentUserReq) returns (CurrentUserResp);
}


///////////////////////////////////////////////////////////////////////////////
// Register rpc
///////////////////////////////////////////////////////////////////////////////
message RegisterReq {
    string username = 1; // must be non-empty
    string password = 2; // must be non-empty
}

message RegisterResp {
    User user = 1; // The user that was registered
}


///////////////////////////////////////////////////////////////////////////////
// Login rpc
///////////////////////////////////////////////////////////////////////////////
message LoginReq {
    string username = 1; 
    string password = 2;
}

message LoginResp {
    Session session = 1; // Use this Session message as your key for authenticated requests
}


///////////////////////////////////////////////////////////////////////////////
// User() rpc
///////////////////////////////////////////////////////////////////////////////
message UserReq {
    string username = 2;
}

message UserResp {
    User user = 1;
}


///////////////////////////////////////////////////////////////////////////////
// CurrentUser() rpc
///////////////////////////////////////////////////////////////////////////////
message CurrentUserReq {
    Session session = 1; // To get the current user's information, you need to authenticate via the Login() rpc
}

message CurrentUserResp {
    User user = 1;
}


///////////////////////////////////////////////////////////////////////////////
// Data messages
///////////////////////////////////////////////////////////////////////////////


// User is the public user message
message User {
    string username = 1;
}


// Session is a message that represents a session. Use it as your key
// for making authenticated rpc calls
message Session {
    string token = 1;
    string username = 2;
}


// PrivateUser is the message that is stored in the DB, do not publiclly expose it.
message PrivateUser {
    string username = 1;
    bytes passwordSha256 = 2;
}
